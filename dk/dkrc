#!/bin/sh

# example dkrc to show some basic command usage and error reporting

# determine where to place the log file
logfile="$HOME/.dkrc.log"
[ -d "$HOME/.local/share/xorg" ] && logfile="$HOME/.local/share/xorg/dkrc.log"
: > "$logfile"


# (re)load sxhkd for keybinds
if hash sxhkd >/dev/null 2>&1; then
	pkill sxhkd
	sxhkd -c "$HOME/.config/dk/sxhkdrc" &
fi

{ # compound command to redirect all output

	# workspace settings
	# ------------------------

	# initialize 10 workspaces (1-10) (default: 1/monitor)
	dkcmd set numws=10

	# default workspace '_' values used when allocating new workspaces
	# can be applied to all existing workspaces when passed 'apply' after ws=_
	dkcmd set ws=_ apply layout=tile master=1 stack=3 gap=6 msplit=0.5 ssplit=0.5

	# use grid layout, padding, and gaps on workspace 10
	dkcmd set ws=7 layout=grid pad left=4 right=4 top=4 bottom=4 gap width=8


	dkcmd set ws=6 layout=rtile

	dkcmd set static_ws=true 
	# change workspace names (default: number == name)
	# dkcmd set \
	# 	ws=1  name="edit" \
	# 	ws=2  name="web" \
	# 	ws=3  name="3" \
	# 	ws=4  name="4" \
	# 	ws=5  name="5" \
	# 	ws=6  name="6" \
	# 	ws=7  name="7" \
	# 	ws=8  name="8" \
	# 	ws=9  name="9" \
	# 	ws=10 name="10"

	# enable static workspaces and assign them to monitors (only relevant for multiple monitors)
	# aside -
	#       many that come from other workspace models tried dk and requested this feature
	#       try embracing the default behaviour and allow access to any workspace from any monitor
	#       you might end up liking it :)
	#
	 mon1='LVDS1'
	 mon2='HDMI1'
	 dkcmd set static_ws=true \
	 ws=1  mon=LVDS1 \
	 ws=2  mon=HDMI1 \
	 ws=3  mon=HDMI1 \
	 ws=4  mon=HDMI1 \
	 ws=5  mon=LVDS1 \
	 ws=6  mon=HDMI1 \
	 ws=7  mon=LVDS1 \
	 ws=8  mon=HDMI1 \
	 ws=9  mon=LVDS1 \
	 ws=10 mon=LVDS1 \


	# global settings
	# ---------------------

	# focus windows when receiving activation and enable focus-follows-mouse
	dkcmd set focus_open=true focus_urgent=true focus_mouse=true

	# place clients at the tail and ignore size hints on tiled windows
	dkcmd set tile_tohead=0 tile_hints=false

	# minimum width/height for resizing, and minimum allowed on-screen when moving
	dkcmd set win_minwh=50 win_minxy=10

	# disable gaps and borders in single window layouts
	dkcmd set smart_gap=false smart_border=false

	# define mouse mod and move/resize buttons
	dkcmd set mouse mod=super move=button1 resize=button3

  # apply when changing the default _ workspace apply settings to existing real workspaces.
  # dkcmd set ws=_ apply SETTING

	# borders
	# ---------

	# traditional
	# set border width and colour for each window state
	# dkcmd set border width=1 colour focus='#6699cc' unfocus='#000000' urgent='#ee5555'

	# alternative
	# enable split borders and colours, width is overall width, outer width consumes some of width.
	# outer width must be less than width, outer width of 0 will be single borders
	dkcmd set border width=7 outer_width=6 \
		colour \
		focus='#5f568b' \
		unfocus='#433c62' \
		urgent='#f38ba8' \
		outer_focus='#1e1e2e' \
		outer_unfocus='#1e1e2e' \
		outer_urgent='#f5e0dc'


	# window rules
	# --------------

	# rule class, instance, and title regexes (*ALWAYS* CASE INSENSITIVE)

	# open window(s) on a specific workspace (assigned monitor)
	dkcmd rule class="^gimp$" ws=8
	dkcmd rule class="^geany$" ws=6
	dkcmd rule class="^lxappearance$" ws=5
	dkcmd rule class="^pavucontrol$" ws=5
	dkcmd rule class="^evince$" ws=7
	dkcmd rule class="^claws-mail$" ws=3
  dkcmd rule class="^Nemo$" ws=4

# open window(s) with sticky and floating enabled to view on all workspaces.
	dkcmd rule class="^stickyterm$" stick=true float=true w=1280 h=720
	dkcmd rule class="^scratchpad$" float=true


	# open window(s) on a monitor by number or name (active workspace on monitor)
	dkcmd rule class="^firefox$" mon="mon1"

	# open window(s) and use a callback function (user defined in config.h)
	# we also ignore=true to stop the window from being resized on it's own from events
	# eg. mpv --x11-name=albumart /path/to/media
	dkcmd rule class="^mpv$" instance="^albumart$" float=true ignore=true callback=albumart bw=0

	# open window(s) in a floating state
	dkcmd rule class="^(pavucontrol|ktorrent|conky|lxappearance)$" float=true

	# open window(s) with a specific geometry and coordinates (floating only!)
	dkcmd rule class="^firefox$" title="^open files$" float=true w=1280 h=720

	# open window(s) with sticky and floating enabled to view on all workspaces.
	dkcmd rule class="^stickyterm$" stick=true float=true w=1280 h=720
	dkcmd rule class="^scratchpad$" float=true

	# focus window and workspace on opening
	dkcmd rule class="^firefox$" ws=4 focus=true
	
	dkcmd rule class="^qutebrowser$" ws=4 focus=true
	

	#floating rules

	dkcmd rule class="^mpv$" ws=6 float=true focus=true
	dkcmd rule class="^Gnome-calculator$"  float=true
	dkcmd rule class="^feh$" float=true focus=true
	dkcmd rule class="^sxiv$" float=true focus=true
	dkcmd rule class="^mousepad$" ws=4 focus=true


	# apply current rule set to all existing windows
	dkcmd rule apply '*'

	# delete all rules
	# dkcmd rule remove '*'

} >> "$logfile" 2>&1 # append responses



# Kill if already running
killall -9  dunst picom


# Fix cursor
xsetroot -cursor_name left_ptr

# Start mpd
exec mpd &



# autostart applications

		"nitrogen --restore",
                "dunst --config $HOME/.config/dk/bin/dkdunst.sh",
                "picom --config $HOME/.config/dk/bin/dkpicom.sh",
                "/usr/bin/emacs --daemon"


# inform of any errors in a notification
if grep -q 'error:' "$logfile"; then
	hash notify-send && notify-send -t 0 -u critical "dkrc has errors" \
		"$(awk '/error:/ {sub(/^error: /, ""); gsub(/</, "\<"); print}' "$logfile")"
	exit 1
fi

exit 0
